<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbxUpArrow.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        lGbKGM+wJKvfnkwAhSIjhbJSmiljPIPInlAoMlIoK6WZMsYziOwJhSIjhbJSmiljPIPInlAoMlIoK6WZ
        MsYziOwJhSIjhbJSmiljPIPInlAoMlIoK6WZMsYziOwJhSIjhbJSmiljPIPInlAoMlIoK6WZMsYziOwJ
        hSIjhbJSmiljPIPInlAoMlIoK6WZMsYziOwJhSIjhbJSmiljPIPInlAoMlIoK6WZMsYziOwJhSIjhbJS
        miljPIPInlAoMlIoK6WZMsYziOwJhSIjhbJSmiljPIPInlAoMlIoK6WZMsYziOwJhWIn4xlE9oRCsZPx
        DCJ7QqHYyXgGkT2hUOxkPIPInlAodjKeQWRPKBQ7Gc8gsicUip2MZxDZEwrFTsYziOwJhWIn4xlE9oRC
        sZPxDCJ7QqHYyXgGkT2hUOxkPIPInlAodjKeQWRPKBQ7Gc8gsicUip2MZxDZEwrFTsYziIiIiIiIiIiI
        iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIjIb/744986SPbhXJUwawAAAABJRU5ErkJggg==
</value>
  </data>
</root>